
## 第一部分： 基础信息
name: amp_demo                               # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: rel_3.3.0                                     # <必选项> 组件版本号
description: amp entry demo                  # <必选项> 建议至少20字以上
type: solution                                      # <必选项> 组件类型，为：solution, chip, board, common, sdk


solution:
  cpu_id: cpu0
  board_name: haaseduk1

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - cli: rel_3.3.0
  - osal_aos: rel_3.3.0
  - haas100: rel_3.3.0
  - haas200: rel_3.3.0
  - haaseduk1: rel_3.3.0
  - amp: rel_3.3.0
  # - vexpress_a9: rel_3.3.0

## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: t-head
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   board_name: pangu_cpu0_evb             # <可选项> 指定开发板组件名，未设置时，使用depends中 board 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀

## solution component
# hw_info:
#   cpu_id: cpu0
#   board_name: pangu_cpu0_evb
#   cpu_name: CK805EF
#   vendor_name: thead
#   chip_name: 'chip_pangu'
#   ld_script: configs/gcc_eflash.ld.S

## board component
# hw_info:
#   chip_name: chip_pangu
#   ld_script: configs/gcc_eflash.ld

## chip component (单处理器)
# hw_info:
#   cpu_name: CK804EF
#   ld_script: configs/gcc_eflash.ld
#   toolchain_prefix: csky-abiv2-elf
#   flash_program: bin/flash_program.elf

## chip component(多处理器)
# hw_info:
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - "maintask.c"
  - "amp_entry.c"

## 第五部分：配置信息
def_config:                              # 组件的可配置项
    AMP_ADVANCED_ADDON_OTA: 1
    AMP_CORE_ADDON_BUILDIN: 1
    AMP_CORE_ADDON_CHECKSUM: 1
    AMP_CORE_ADDON_SYSTEM: 1
    AMP_CORE_ADDON_FS: 1
    AMP_CORE_ADDON_KV: 1
    AMP_CORE_ADDON_LOG: 1
    AMP_CORE_ADDON_PM: 0
    AMP_CORE_ADDON_BATTERY: 0
    AMP_CORE_ADDON_CHARGER: 0
    AMP_CORE_ADDON_SYSTIMER: 1
    AMP_CORE_ADDON_CRYPTO: 0
    AMP_HW_ADDON_ADC: 1
    AMP_HW_ADDON_CAN: 0
    AMP_HW_ADDON_DAC: 0
    AMP_HW_ADDON_GPIO: 1
    AMP_HW_ADDON_I2C: 1
    AMP_HW_ADDON_SPI: 1
    AMP_HW_ADDON_TIMER: 0
    AMP_HW_ADDON_PWM: 1
    AMP_HW_ADDON_RTC: 0
    AMP_HW_ADDON_UART: 1
    AMP_HW_ADDON_LCD: 0
    AMP_HW_ADDON_WDG: 0
    AMP_NET_ADDON_UDP: 0
    AMP_NET_ADDON_TCP: 0
    AMP_NET_ADDON_MQTT: 0
    AMP_NET_ADDON_HTTP: 1
    AMP_NET_ADDON_NETMGR: 1
    AMP_NET_ADDON_WIFI: 0
    AMP_NET_ADDON_CELLULAR: 0
    AMP_ADVANCED_ADDON_AIOT_DEVICE: 1
    AMP_ADVANCED_ADDON_AIOT_GATEWAY: 0
    AMP_ADVANCED_ADDON_AUDIOPLAYER: 0
    AMP_ADVANCED_ADDON_TTS: 0
    AMP_ADVANCED_ADDON_LOCATION: 0
    AMP_ADVANCED_ADDON_KEYPAD: 0
    AMP_ADVANCED_ADDON_UND: 0
    AMP_WIRELESS_ADDON_BT_HOST: 1
    AMP_UTILS_ADDON_CHECKSUM: 0
    AMP_ADVANCED_ADDON_UI: 0
    AMP_ADVANCED_ADDON_BLECFGNET: 1
#   CONFIG_A7_DSP_ENABLE: 1
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
