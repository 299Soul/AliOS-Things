name: eduk1_demo
version: master # <必选项> 组件版本号
description: HaaS EDU K1 物联网教育开发板出厂默认固件

type: solution

solution:
  cpu_id: cpu0
  # board_name: vexpress_a9
  board_name: haaseduk1
## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - linksdk: master
  - mbedtls: master
  - netmgr: master
  - uservice:  master
  - rhino: master
  - osal_aos: master
  - cli: master
  - littlefs: master
  - wifi: master
  - lwip: master
  - a2sa: master
  - ai_agent: master
  - uvoice: master
  - ble_netconfig: master
  - debug: master
  - sh1106: master
  - haaseduk1: master

# supported_boards 中记录当前组件能支持的所有板子
supported_boards:
  - haaseduk1: master

def_config:
    CONFIG_A7_DSP_ENABLE: 1    # 必须：使能HaaSEDU K1音频驱动开关
    CLI_IOBOX_ENABLE: 1        # 可选：使能文件系统测试命令，例如ls, ll, mkdir, touch, echo等
    CONFIG_KWS_AI_ENGINE_ENABLE: 1
    # ENABLE_FACTORY_TEST: 1    # 可选：使能产测功能，可用于产品自检。

## 第四部分：编译连接信息
build_config:                            # <可选项> 编译配置项
  prebuild_script: k1_apps/kws/cp_resources.py
  define:
    - __os_alios_things__
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - "maintask.c"
  - "app_start.c"
  - "k1_apps/*.c"
  - "k1_apps/homepage/homepage.c"
  - "k1_apps/humiture/humiture.c"
  - "k1_apps/lightmeter/lightmeter.c"
  - "k1_apps/shakeshake/shakeshake.c"
  - "k1_apps/compass/compass.c"
  - "k1_apps/barometer/barometer.c"
  - "k1_apps/greedySnake/greedySnake.c"
  - "k1_apps/gyroscope/gyroscope.c"
  - "k1_apps/aircraftBattle/aircraftBattle.c"
  - "k1_apps/musicbox/musicbox.c"
  - "k1_apps/kws/kws.c"
  - "k1_apps/kws/beeper/beeper.c"

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
