
name: py_engine_demo
version: rel_3.3.0                                   # <必选项> 组件版本号
description: start python engine demos

type: solution

solution:
  cpu_id: cpu0
  # board_name: vexpress_a9
  board_name: haaseduk1
## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - init: rel_3.3.0
  - cli: rel_3.3.0
  - osal_aos: rel_3.3.0
  - py_engine: rel_3.3.0

# supported_boards 中记录当前组件能支持的所有板子
supported_boards:
  - haas100: rel_3.3.0
  - haas200: rel_3.3.0
  - haaseduk1: rel_3.3.0

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
  # prebuild_script: cp_solutions_res.py
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs


# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - "maintask.c"
  - "appdemo.c"


## 第五部分：配置信息
aos_system_config: &aos_system_config
  PY_BUILD_CLI: 1
  PY_BUILD_UAGENT: 1
  PY_BUILD_CJSON: 1
  PY_BUILD_VFS: 1
  PY_BUILD_LWIP: 1

  #以下配置同时仅允许打开其中一项
  LINKSDK_DEMO_MQTT_BASIC: y       #MQTT连IoT平台基础功能演示
  LINKSDK_DEMO_MQTT_BCAST: n       #MQTT连IoT平台接收广播推送演示
  LINKSDK_DEMO_MQTT_RRPC: n        #MQTT连IoT平台RRPC演示
  CLI_IOBOX_ENABLE: 1              # Enable iobox cmd
  ULOG_CONFIG_ASYNC: 1
  ULOG_CONFIG_POP_FS: 1
  ULOG_CONFIG_POP_UDP: 1

  #以下是Python引擎模块编译选项，1 为打开，0 为关闭
  PY_BUILD_FATFS: 0                # Py_Engine module build FATFS Flag
  PY_BUILD_AI: 0                   # Py_Engine module build AI Flag
  PY_BUILD_UDP: 1                  # Py_Engine module build udp config
  PY_BUILD_NETMGR: 1               # Py_Engine module build http config
  PY_BUILD_MQTT: 1                 # Py_Engine module build mqtt config
  PY_BUILD_USOCKET: 1              # Py_Engine module build usocket config
  PY_BUILD_AUDIO: 1                # Py_Engine module build uvoice config
  PY_BUILD_UOS: 1                  # Py_Engine module build uos config
  PY_BUILD_OSS: 0                  # Py_Engine module build oss config
  PY_BUILD_UCAMERA: 0              # Py_Engine module build ucamera config
  PY_BUILD_BLE: 1                  # Py_Engine module build ble net and host config
  PY_BUILD_SNTP: 1                 # Py_Engine module build sntptime config
  PY_BUILD_UGRAPHICS: 0            # Py_Engine module build ugraphics config
  PY_BUILD_ULOG: 1                 # Py_Engine module build ulog config
  PY_BUILD_BOOT: 1                 # Py_Engine module build boot config
  PY_BUILD_CHANNEL: 1              # Py_Engine module build boot config
  PY_BUILD_AIAGENT: 0              # Py_Engine module build ai_agent config
  PY_BUILD_xTEM: 1               # Py_Engine module build system config

  PY_BUILD_MBEDTLS: 1              # Py_Engine module build mbed TLS
  MBEDTLS_CTR_DRBG_C: 1
  MBEDTLS_ENTROPY_C: 1
  # MBEDTLS_SHA256_C: 1
  MBEDTLS_AES_ROM_TABLES: 1
  # MBEDTLS_AES_C: 1
  # MBEDTLS_FS_IO: 1
  MBEDTLS_NO_PLATFORM_ENTROPY: 1
  CONFIG_KWS_AI_ENGINE_ENABLE: 0 # 必须：使能HaaS HaaS唤醒引擎

  MICROPY_READER_VFS: 1
  MICROPY_VFS_POSIX: 1
  MICROPY_PY_HTTP: 1
  MICROPY_PY_MODBUS: 1
  MICROPY_PY_KV: 1
  MICROPY_PY_OTA: 1
  MICROPY_PY_DRIVER: 1
  MICROPY_PY_ALIYUNIOT: 1        # Py_Engine module build linksdk config

## 第五部分：配置信息
def_config:                              # 组件的可配置项
  USE_AOS_KERNEL: 1
  <<: *aos_system_config
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
  MBEDTLS_CONFIG_TLS_MAX_CONTENT_LEN: 16384 # 增大SSL最大content size，避免播放URL异常
  CONFIG_A7_DSP_ENABLE: 1                  # 使能HaaS100音频驱动开关

## 第六部分：安装信息
install:
  - dest: "include"
    source:
      - "include/*.h"
#   - dest: include/                       # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
