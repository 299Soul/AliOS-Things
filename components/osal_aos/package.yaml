
## 第一部分： 基础信息
name: osal_aos                                          # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: master                                     # <必选项> 组件版本号
description: os interface adaptation layer                 # <必选项> 建议至少20字以上
type: common                                        # <必选项> 组件类型，为：solution, chip, board, common, sdk

tag: 核心模块                                       # <可选项> 组件分类，缺省值： ''
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - base
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - rhino: master ? <!OS_FREERTOS>
  - ulog: master
#  - cli: master

## 第四部分：编译连接信息
#build_config:                            # <可选项> 编译配置项
#  include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#    - include                              #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
build_config:
  cflag: -Wall -Werror
  internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
    - rhino/include
  include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
    - include                              #        include 只能是该软件包下的目录，不能使用外部目录
source_file:
  - rhino/*.c ? <!OS_FREERTOS>
  - freertos/*.c ? <OS_FREERTOS>
  - export.c ? <CONFIG_DM>
#  - example/event_example.c
#  - example/mem_example.c
#  - example/mutex_example.c
#  - example/queue_example.c
#  - example/sem_example.c
#  - example/task_example.c
#  - example/timer_example.c
#  - example/workqueue_example.c


## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  SYSINFO_SYSTEM_VERSION: "1.0.1"          # Anolis Things系统版本信息
  OSAL_RHINO: 1
  AOS_HAL: 1

## 第六部分：安装信息
install:
  - dest: include/aos                      # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
    source:                                # 安装源列表
     - include/aos/*.h                     # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
