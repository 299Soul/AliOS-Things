
## 第一部分： 基础信息
name: linkkit                                       # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: rel_3.3.0                                    # <必选项> 组件版本号
description: 连接阿里云IoT平台设备端SDK。               # <必选项> 建议至少20字以上
type: common                                        # <必选项> 组件类型，为：solution, chip, board, common, sdk

tag: 网络组件                                        # <可选项> 组件分类，缺省值： ''
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - mqtt
  - http
  - IoT Platform
homepage: https://help.aliyun.com/document_detail/163755.html?spm=a2c4g.11186623.6.558.4ed14e1epfYZyN
license: Apache-2.0 License                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - osal_aos: rel_3.3.0
  - mbedtls: rel_3.3.0
  - cjson: rel_3.3.0
  - lwip: rel_3.3.0
  - netmgr: rel_3.3.0
  - ulog: rel_3.3.0

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  define:
    CONFIG_SDK_THREAD_COST: 1          ? <DEVICE_MODEL_GATEWAY>
    WITH_MQTT_ZIP_TOPIC: 1
    WITH_MQTT_SUB_SHORTCUT: 1
    WITH_MQTT_DYN_BUF: 1
    # USE_YLOOP: 1
    USE_PUBLIC_MBEDTLS: 1              ? <MBEDTLS_CONFIG_TLS>
    USE_PUBLIC_MBEDTLS: 1               ? <COAP_DTLS_SUPPORT>
    SYSINFO_APP_VERSION: "20210803.2050"
    MBEDTLS_CONFIG_TLS: 1
    MBEDTLS_CIPHER_MODE_CFB: 1
    AWSS_DISABLE_REGISTRAR: 1

  include:
    - include
    - wifi_provision
    - wifi_provision/frameworks
    - wifi_provision/frameworks/statics
    - wifi_provision/frameworks/ieee80211
    - wifi_provision/frameworks/utils
    - wifi_provision/frameworks/aplist
    - wifi_provision/frameworks
    - wifi_provision/dev_bind
    - wifi_provision/dev_bind/os
    - wifi_provision/dev_bind/awss_reset
    - wifi_provision/smartconfig        ? <AWSS_SUPPORT_SMARTCONFIG>
    - wifi_provision/mcast_smartconfig  ? <AWSS_SUPPORT_SMARTCONFIG_MCAST>
    - wifi_provision/zero_config        ? <AWSS_SUPPORT_ZEROCONFIG>
    - wifi_provision/p2p                ? <AWSS_SUPPORT_SMARTCONFIG_WPS>
    - wifi_provision/phone_ap           ? <AWSS_SUPPORT_AHA>
    - wifi_provision/dev_ap             ? <AWSS_SUPPORT_DEV_AP>
    - wifi_provision/ht40               ? <AWSS_SUPPORT_HT40>

    - iot_coap
    - iot_coap/CoAPPacket
    - iot_coap/client                   ? <COAP_COMM_ENABLED>
    - iot_coap/server                   ? <COAP_SERVER>

    - dev_model
    - dev_model/client
    - dev_model/deprecated              ? <DEPRECATED_LINKKIT>

    - mqtt

    - dev_sign

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  # libiot_awss
  - wifi_provision/frameworks/*.c
  - wifi_provision/frameworks/ieee80211/*.c
  - wifi_provision/frameworks/statics/*.c
  - wifi_provision/frameworks/aplist/*.c
  - wifi_provision/frameworks/utils/*.c
  - wifi_provision/dev_bind/*.c
  - wifi_provision/dev_bind/awss_reset/*.c
  - wifi_provision/dev_bind/os/*.c

  - wifi_provision/smartconfig/*.c         ? <AWSS_SUPPORT_SMARTCONFIG>
  - wifi_provision/mcast_smartconfig/*.c   ? <AWSS_SUPPORT_SMARTCONFIG_MCAST>
  - wifi_provision/zero_config/*.c         ? <AWSS_SUPPORT_ZEROCONFIG>
  - wifi_provision/p2p/*.c                 ? <AWSS_SUPPORT_SMARTCONFIG_WPS>
  - wifi_provision/phone_ap/*.c            ? <AWSS_SUPPORT_AHA>
  - wifi_provision/dev_ap/*.c              ? <AWSS_SUPPORT_DEV_AP>
  - wifi_provision/ht40/*.c                ? <AWSS_SUPPORT_HT40>

  # libiot_certs
  - certs/*.c

  # libiot_coap
  - iot_coap/CoAPPacket/*.c
  - iot_coap/client/*.c                    ? <COAP_COMM_ENABLED>
  - iot_coap/server/*.c                    ? <COAP_SERVER>

  # libiot_devmodel
  - dev_model/*.c
  - dev_model/client/*.c
  - dev_model/deprecated/*.c                ? <DEPRECATED_LINKKIT>
  - dev_model/server/*.c                    ? <ALCS_ENABLED>
  - dev_model/alcs/*.c                      ? <ALCS_ENABLED>

  # libiot_infra
  - infra/infra_mem_stats.c
  - infra/infra_defs.c
  - infra/infra_aes.c                       ? <INFRA_AES>
  - infra/infra_cjson.c                     ? <INFRA_CJSON>
  - infra/infra_compat.c                    ? <INFRA_COMPAT>
  - infra/infra_httpc.c                     ? <INFRA_HTTPC>
  - infra/infra_json_parser.c               ? <INFRA_JSON_PARSER>
  - infra/infra_log.c                       ? <INFRA_LOG>
  - infra/infra_md5.c                       ? <INFRA_MD5>
  - infra/infra_net.c                       ? <INFRA_NET>
  - infra/infra_preauth.c                   ? <INFRA_PREAUTH>
  - infra/infra_report.c                    ? <INFRA_REPORT>
  - infra/infra_prt_nwk_payload.c           ? <INFRA_LOG_NETWORK_PAYLOAD>
  - infra/infra_sha1.c                      ? <INFRA_SHA1>
  - infra/infra_sha256.c                    ? <INFRA_SHA256>
  - infra/infra_string.c                    ? <INFRA_STRING>
  - infra/infra_timer.c                     ? <INFRA_TIMER>

  # libiot_mqtt
  - mqtt/mqtt_api.c
  - mqtt/impl/*.c                           ? <MQTT_DEFAULT_IMPL>

  # libiot_sign
  - dev_sign/dev_sign_mqtt.c

  # libiot_wrappers

  - wrappers/os/HAL_OS_rhino.c
  - wrappers/os/HAL_TCP_rhino.c
  - wrappers/os/HAL_PRODUCT_rhino.c
  - wrappers/os/HAL_FS_rhino.c                ? <FS_ENABLED>
  - wrappers/os/HAL_AWSS_rhino.c              ? <DEV_BIND_ENABLED>
  - wrappers/os/HAL_UDP_rhino.c               ? <COAP_SERVER>

  - wrappers/os/HAL_TLS_itls.c                ? <USE_ITLS>
  - wrappers/os/HAL_TLS_mbedtls.c
  - wrappers/os/dns.c                         ? <HAL_TLS_DNS_ENHANCE>

  - wrappers/os/dns.c                         ? <HAL_TLS_DNS_ENHANCE>
  - wrappers/os/HAL_DTLS_mbedtls.c            ? <COAP_DTLS_SUPPORT>

  # - wrappers/platform/os/HAL_AWSS_yoc.c
  # - wrappers/platform/os/HAL_Crypt_yoc.c
  # - wrappers/platform/os/HAL_OS_yoc.c
  # - wrappers/platform/os/HAL_TCP_yoc.c
  # - wrappers/platform/os/HAL_UDP_yoc.c
  # - wrappers/platform/ssl/HAL_DTLS_mbedtls.c
  # - wrappers/platform/ssl/HAL_TLS_mbedtls.c
  # - wrappers/platform/ssl/iotx_hmac.c

## 第五部分：配置信息
def_config:                              # 组件的可配置项
  AWSS_SUPPORT_SMARTCONFIG: y
  AWSS_SUPPORT_SMARTCONFIG_MCAST: y
  AWSS_SUPPORT_ZEROCONFIG: y
  AWSS_SUPPORT_SMARTCONFIG_WPS: y
  AWSS_SUPPORT_APLIST: y
  # AWSS_SUPPORT_AHA: y
  AWSS_SUPPORT_DEV_AP: y
  # AWSS_SUPPORT_HT40: y
  # AWSS_DISABLE_ENROLLEE: y
  # AWSS_SUPPORT_DISCOVER:  y
  WIFI_PROVISION_ENABLED: y

  # COAP_COMM_ENABLED: y
  COAP_SERVER: y

  INFRA_AES: y
  INFRA_CJSON: y
  INFRA_COMPAT: y
  # INFRA_HTTPC: y
  INFRA_JSON_PARSER: y
  # INFRA_LOG: y
  INFRA_MD5: y
  INFRA_NET: y
  # INFRA_PREAUTH: y
  INFRA_REPORT: y
  INFRA_LOG_NETWORK_PAYLOAD: y
  INFRA_SHA1: y
  INFRA_SHA256: y
  INFRA_STRING: y
  INFRA_TIMER: y
  # INFRA_AES_BUILDIN: y
  # INFRA_AES_ROM_TABLES: y
#
# Log Configurations
#
# INFRA_LOG_ALL_MUTED: y
# INFRA_LOG_MUTE_INF: y
# INFRA_LOG_MUTE_WRN: y
# INFRA_LOG_MUTE_ERR: y
# INFRA_LOG_MUTE_CRT: y
# INFRA_MEM_STATS: y

  MQTT_DEFAULT_IMPL: y
  MQTT_COMM_ENABLED: y
  # MQTT_PRE_AUTH: y
  MQTT_DIRECT: y
  MQTT_AUTO_SUBSCRIBE: y
  # ASYNC_PROTOCOL_STACK: y

  # FS_ENABLED: y
  DEV_BIND_ENABLED: y

  HAL_TLS_DNS_ENHANCE: y

  PLATFORM_HAS_STDINT: y
  PLATFORM_HAS_DYNMEM: y
#
# Linkkit HAL config
#
  SUPPORT_TLS: y
  HAL_TLS_DNS_ENHANCE: y
  USE_MBEDTLS: y
  # COAP_DTLS_SUPPORT: y
  # TLS_SAVE_TICKET: y
  HAL_KV: y
  FORCE_SSL_VERIFY: y
  SIGN_CIPHER_HMAC_SHA1: y
  # SIGN_CIPHER_HMAC_SHA256: y

#
# Device Model Configurations
#
  # DEVICE_MODEL_GATEWAY: y
  DEVICE_MODEL_ENABLED: y
  # DEVICE_MODEL_RAWDATA_SOLO: y
  # DEPRECATED_LINKKIT: y
  # ALCS_ENABLED
  # DEVICE_MODEL_SHADOW: y
  # LOG_REPORT_TO_CLOUD: y

  BUILD_AOS: y

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
install:
  - dest: "include"
    source:


## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
