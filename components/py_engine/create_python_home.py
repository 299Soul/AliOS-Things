# coding=utf-8
import shutil
import os
import sys
import stat
import datetime
import subprocess
from datetime import datetime

def copy_apps_files(script_dir, yaml_dir):

    framework_dir = os.path.join(script_dir, "framework")

    pyFile = open(yaml_dir)
    data = pyFile.read()
    print(' data to be parsed is %s' % data)

    data_prebuild=""
    pythonApp_dir=""
    python_root_dir=""
    if "ALI_AOS_HAAS_EDU_K1" in data:  # haasedu
        print("HaaS EDU platform")
        data_prebuild = "hardware/chip/haas1000/prebuild/data/"
        pythonApp_dir = os.path.join(
            script_dir, "tests/haas", "HaaSEdu", "python-apps")
        python_root_dir = os.path.join(
            script_dir, "tests/haas", "HaaSEdu", "pyamp")

    elif "ALI_AOS_HAAS200" in data:     # haas200
        print("HaaS 200 platform")
        data_prebuild = "hardware/chip/rtl872xd/prebuild/data/"
        pythonApp_dir = os.path.join(
            script_dir, "tests/haas", "HaaS200", "python-apps")
        python_root_dir = os.path.join(
            script_dir, "tests/haas", "HaaS200", "pyamp")
    else:                               # haas100
        print("HaaS100 chip")
        data_prebuild="hardware/chip/haas1000/prebuild/data/"
        pythonApp_dir = os.path.join(
            script_dir, "tests/haas", "HaaS100", "python-apps")
        python_root_dir = os.path.join(
            script_dir, "tests/haas", "HaaS100", "pyamp")
    python_home="lib/micropython/"
    print('data_prebuild = %s' % data_prebuild)

    #return ../../ path
    prebuild_dest1 = os.path.dirname(framework_dir)
    prebuild_dest2 = os.path.dirname(prebuild_dest1)
    prebuild_dest = os.path.dirname(prebuild_dest2)
    # make /hardware/chip/haas1000/prebuild/data/lib/micropython/ path
    prebuildDest = os.path.join(prebuild_dest, data_prebuild, python_home)

    components_dest = os.path.dirname(script_dir)
    root_dest = os.path.dirname(components_dest)
    # make /hardware/chip/haas1000/prebuild/data/ path
    pythonhomeDest = os.path.join(root_dest, data_prebuild, 'python-apps')
    pythonrootDest = os.path.join(root_dest, data_prebuild, 'pyamp')

    if not os.path.exists(prebuildDest):
        os.makedirs(prebuildDest)

    # if not os.path.exists(pythonhomeDest):
    #     os.makedirs(pythonhomeDest)

    print('framework_dir = %s' % framework_dir)
    print('prebuildDest = %s' % prebuildDest)


    # print(os.listdir(framework_dir))
    #cp data prebuild files
    for root, dirs, files in os.walk(framework_dir):
        for file in files:
            src_file = os.path.join(root, file)
            shutil.copy(src_file, prebuildDest)
            # print(src_file)

    print('pythonApp_dir = %s' % pythonApp_dir)
    print('pythonhomeDest = %s' % pythonhomeDest)


    #cp pythonme
    if os.path.exists(pythonhomeDest):
        for fileList in os.walk(pythonhomeDest):
            for name in fileList[2]:
                os.chmod(os.path.join(fileList[0], name), stat.S_IWRITE)
                os.remove(os.path.join(fileList[0], name))
        shutil.rmtree(pythonhomeDest)
        print("delete python home OK")
    else:
        print("no filepath")
    shutil.copytree(pythonApp_dir, pythonhomeDest)

    #cp pythonme
    print('python_root_dir = %s' % python_root_dir)
    print('pythonrootDest = %s' % pythonrootDest)

    if os.path.exists(pythonrootDest):
        for fileList in os.walk(pythonrootDest):
            for name in fileList[2]:
                os.chmod(os.path.join(fileList[0], name), stat.S_IWRITE)
                os.remove(os.path.join(fileList[0], name))
        shutil.rmtree(pythonrootDest)
        print("delete python boot root OK")
    else:
        print("no filepath")

    shutil.copytree(python_root_dir, pythonrootDest)
    print("run external script success")


"""
Generate header file with macros defining MicroPython version info.
This script works with Python 2.6, 2.7, 3.3 and 3.4.
"""
def make_version_header(filename):

    git_tag = 'v1.15'
    git_hash = '5429689-dirty'

    build_date = datetime.now()
    if "SOURCE_DATE_EPOCH" in os.environ:
        build_date = datetime.datetime.utcfromtimestamp(
            int(os.environ["SOURCE_DATE_EPOCH"])
        ).date()

    # Generate the file with the git and version info
    file_data = """\
// This file was generated by py/makeversionhdr.py
#define MICROPY_GIT_TAG "%s"
#define MICROPY_GIT_HASH "%s"
#define MICROPY_BUILD_DATE "%s"
""" % (
        git_tag,
        git_hash,
        build_date.strftime("%Y-%m-%d, %H:%M:%S"),
    )

    # Check if the file contents changed from last time
    write_file = True
    if os.path.isfile(filename):
        with open(filename, "r") as f:
            existing_data = f.read()
        if existing_data == file_data:
            write_file = False

    # Only write the file if we need to
    if write_file:
        print("GEN %s" % filename)
        with open(filename, "w") as f:
            f.write(file_data)

if __name__ == "__main__":

    script_dir = os.path.dirname(sys.argv[0])
    mpversion_file = os.path.join(script_dir, 'adapter', 'haas', 'genhdr', "mpversion.h")

    make_version_header(mpversion_file)
    copy_apps_files(script_dir, sys.argv[1])
