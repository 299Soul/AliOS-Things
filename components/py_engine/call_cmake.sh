#!/bin/bash

if [ "$(uname)" == "Darwin" ]; then
    os="Darwin"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    os="Linux"
elif ["$(expr substr $(uname -s) 1 10)"=="MINGW32_NT"];then
    os="Win32"
fi
echo "os is $os"

if [[ -f $1 ]]; then
    # read arguments from file, and choose those arguments we wanted
    filename=$1
    while read line; do
        key=$(echo $line | cut -d '=' -f1)
        if [ "$os" == "Darwin" ]; then
            value=$(echo $line | cut -d '=' -f2-)
        elif [ "$os" == "Linux" ]; then
            value=$(echo $line | cut -d '=' --complement -f1)
        else
            value=""
        fi

        case "$key" in
            --toolchain) toolchain=$(echo $value | sed "s/\"//g");;
            --lib) lib=$(echo $value | sed "s/\"//g");;
            --target) target=$value;;
            --cflag) cflag=$(echo $value | sed "s/#/ /g");;
            --cxxflag) cxxflag=$(echo $value | sed "s/#/ /g");;
            --asmflag) asmflag=$(echo $value | sed "s/#/ /g");;
            --ldflag) ldflag=$(echo $value | sed "s/#/ /g");;
            --cpu) cpu=$value;;
            --macro_list) macro_list=$(echo $value | sed "s/#/ /g" | sed 's/\\\"/\"/g');;
            --global_inc ) global_inc=$(echo $value | sed "s/#/ /g" | sed 's/\\\"//g');;

            *) echo "discard option $line";;
        esac;
    done < "$filename"
else
    # choose those options we needed, and discard others
    until [ $# -eq 0 ]
    do
        key=$(echo $1 | cut -d '=' -f1)
        if [ "$os" == "Darwin" ]; then
            value=$(echo $1 | cut -d '=' -f2-)
        elif [ "$os" == "Linux" ]; then
            value=$(echo $1 | cut -d '=' --complement -f1)
        else
            value=""
        fi

        case "$key" in
            --toolchain) toolchain=$value;shift;;
            --lib) lib=$value;shift;;
            --target) target=$value;shift;;
            --cflag) cflag=$(echo $value | sed "s/#/ /g");shift;;
            --cxxflag) cxxflag=$(echo $value | sed "s/#/ /g");shift;;
            --asmflag) asmflag=$(echo $value | sed "s/#/ /g");shift;;
            --ldflag) ldflag=$(echo $value | sed "s/#/ /g");shift;;
            --cpu) cpu=$value;shift;;
            --macro_list) macro_list=$(echo $value | sed "s/#/ /g");shift;;
            --global_inc ) global_inc=$(echo $value | sed "s/#/ /g"  | sed "s/\"/ /g");shift;;

            *) echo "discard option $1";shift;;
        esac;
    done
fi

echo "the script is $0"
echo "current dir is $(pwd)"
echo "toolchain is $toolchain"
echo "lib is $lib"
echo "target is $target"
echo "cflag is $cflag"
echo "cxxflag is $cxxflag"
echo "asmflag is $asmflag"
echo "ldflag is $ldflag"
echo "cpu is $cpu"
echo "macro_list is $macro_list"
echo "global_inc is $global_inc"

# =======================================================
# do our work
# enter into component path
comp_path=$(dirname $0)
cd $comp_path
if [ $? -ne 0 ]; then
    echo "enter into $comp_path fail!"
    exit 1
fi

# add your specific build command, and set the path of library generated by
# third party build tools
#cd cmake_test
if [ ! -d "build" ]; then
    mkdir build
fi
cd build

if [ -n "$cpu" ]; then
    cflag="$cflag -mcpu=$cpu"
    cxxflag="$cxxflag -mcpu=$cpu"
    ldflag="$ldflag -mcpu=$cpu"
fi

cflag="$cflag --specs=nosys.specs $macro_list"
cxxflag="$cxxflag --specs=nosys.specs $macro_list"
ldflag="$ldflag --specs=nosys.specs"


for item in ${global_inc[*]}
do
    value=" -I${item}"
    cflag=${cflag}${value}
    cxxflag=${cxxflag}${value}

done
#echo ${toolchain}
#echo "${toolchain}-gcc"
if [ ! -f "Makefile" ]; then
    cmake .. -DCMAKE_C_COMPILER="${toolchain}-gcc" -DCMAKE_CXX_COMPILER="${toolchain}-g++" -DCMAKE_C_FLAGS="${cflag}" -DCMAKE_CXX_FLAGS="${cxxflag}" -DCMAKE_BUILD_FLAGS="${ldflag} "
fi

make

libraries="./libpyEngine.a"

# copy library to AliOS-Things library folder
lib_path=$(dirname $lib)
#echo $lib_path
if [ ! -d $lib_path ]; then
    mkdir -p $lib_path
fi
cp $libraries $lib_path
if [ $? -ne 0 ]; then
    echo "copy $libraries failed"
    exit 1
fi
# =======================================================

# result
echo "start copy python-apps to hardware/chip/haas1000/prebuild/data"
cd ..
cp -r python-apps ../../hardware/chip/haas1000/prebuild/data
echo "run external script success"
exit 0
